Q1. オブジェクト指向における「オブジェクト」とはなにか？
>> クラスのデータや構成をもとに作られたインスタンス

Q2. オブジェクト指向プログラミングにおける「クラス」とはなにか？
>> ものづくりにおける設計図。基礎となるデータや構成が記述してあるもの。

Q3. オブジェクト指向プログラミングにおける「カプセル化」とはなにか？
また、カプセル化することのメリットはなにか？
>> 外部からそのクラスのデータに関数を通してのみ干渉できるよう(直接の干渉ができないよう)にし
   データの整合性や安全性を保つこと。
   メリット：外部のコードから処理に必要なオブジェクトに関する情報のみがわかり、
   　　　　　不必要な部分、知らなくていい部分は見れないようにしている。
   　　　　　バグの発生地を特定しやすくなる。

Q4. オブジェクト指向プログラミングにおける「コンポジション」とはなにか？
>> クラスが別のクラスのオブジェクトをプロパティとして持つこと。has-a関係。

Q5. オブジェクト指向プログラミングにおける「継承」とはなにか？
継承のメリット・デメリットはなにか？
>> 親クラスの内容を引き継ぐ、子クラスを作成すること。is-a関係。
   メリット；親クラスに同じ処理やデータなどを記述し、簡単に子クラスでも再利用できる。
   デメリット：親クラスに変更をかけると、子クラスの挙動が変わる可能性があるなど
   　　　　　　親クラスと子クラスの結合性が高く、柔軟性が低い。

Q6. オブジェクト指向プログラミングにおける「委譲」とはなにか？
委譲のメリットはなにか？
>> コンポジションで入れた別クラスのオブジェクトに任意の処理を任せること。
   メリット：処理を切り替える場合、クラスの変更ではなく委譲先を変えるだけで対応できるなど柔軟性が高い。

Q7. カプセル化を実現しているコードをPHPで書いてみよう
>> public/capsule.php

Q8. 継承を実現していて、効果的に継承を使えているコードをPHPで書いてみよう
>> public/inheritance.php

Q9. 委譲を実現しているコードをPHPで書いてみよう。委譲先をインタフェースを用いて多態にしてみよう。
>> public/delegate.php

Q10. インターフェースと継承の違いはなにか？
>> インターフェースはメソッドの枠組みだけで処理内容が書けず実装先に委ねるが、
   継承の場合は親クラスに処理を含めたメソッドが書ける。